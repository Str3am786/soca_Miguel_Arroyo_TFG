{
    "description": [
        {
            "excerpt": "The package enables the user to process any set of user-defined points on rivers or process any of the pre-defined 3,576,396 points on rivers across the globe. Please see the [example](https://github.com/mintproject/riverwidthEO/blob/master/example.py) script for information on how to use the package.\n \n",
            "confidence": [
                [
                    0.9805507738193849
                ]
            ],
            "technique": "Supervised classification",
            "originalHeader": "riverwidthEO version 1.2 (updated July 1st)"
        },
        {
            "excerpt": "<div style=\"text-align: justify\">In many earth science applications, calibration of physical models is a key challenge because ground observations are very scarce or completely absent in most regions. For example, hydrological models simulate the flow of water in a basin using physical principles, but necessarily contain numerous parameters (e.g., soil conductivity at different grid points) whose values need to be calibrated for each study region with the help of observations. The most commonly used observation is discharge (volume per second) estimates that are available through ground stations. These stations are costly to install and maintain, and thus are limited in number.  This paucity (or complete absence) of observation data often leads to poorly calibrated models that provide incorrect predictions or have high uncertainty in practice. \nOur approach is to provide this much needed calibration data using novel machine learning techniques and multi-temporal satellite imagery that is available freely from Earth Observing satellite based sensors such as Sentinel and Landsat. The latest version (version 1.2) of the package uses descarteslabs API to download Sentinel-2 imagery of any given river segment. The multi-spectral imagery is then converted into land/water maps using CNN based deep learning techniques. The area variations thus obtained can be used to constraint hydrological models. Watch this [<ins>video</ins>](http://umnlcc.cs.umn.edu/tmp/data-1050883510-7366.mp4) to see surface area variations of a river segment in Ethiopia.</div> \n",
            "confidence": [
                [
                    0.9865993882161356,
                    0.9955415914102805
                ]
            ],
            "technique": "Supervised classification",
            "originalHeader": "Background",
            "parentHeader": [
                "riverwidthEO version 1.2 (updated July 1st)"
            ]
        },
        {
            "excerpt": "<div style=\"text-align: justify\">The package uses semantic segmentation based deep neural network architecture to convert a satellite image into a land/water mask. First, a CNN based auto-encoder network was pre-trained using 11,000 unlabeled images taken from rivers around the globe. The pre-trained network weights were then used to fine-tune a semantic segmentation network using 2,900 labeled images. To make the algorithms more robust to atmospheric disturbances, land/water masks were updated using physical principles. Specifically, pixels of a river segment do not change independently but are related to each other through hydraulic and bathymetric constraints. These constraints can be used to identify and correct physical inconsistencies in land/water labels obtained from machine learning algorithms.\u00a0</div>\n \n",
            "confidence": [
                [
                    0.9121962689994298
                ]
            ],
            "technique": "Supervised classification",
            "originalHeader": "Methodology",
            "parentHeader": [
                "riverwidthEO version 1.2 (updated July 1st)"
            ]
        },
        {
            "excerpt": "The current version of the algorithm has three limitations that we intend to address in the next version:\n1. In certain cases clouds filter has omission errors which leads to underestimation of surface area by the algorithm.\n2. Similarly, in certain cases cloud shadows get incorrectly classified as water which leads to overestimation of surface area by the algorithm.\n3. The current version does not mask out water bodies adjacent to the river segment in the area calculation which could lead to overestimation of surface area for river segments.\n \n",
            "confidence": [
                [
                    0.9834109072715445
                ]
            ],
            "technique": "Supervised classification",
            "originalHeader": "Limitations",
            "parentHeader": [
                "riverwidthEO version 1.2 (updated July 1st)",
                "Methodology"
            ]
        },
        {
            "excerpt": "- Cloudy and hazy images show high correlation between the aerosol band and the water vapor band which can be used to flag cloudy and hazy images.\n- Images where correlation between aerosol band and water vapor band is greater than 0.8 are considered as cloudy or hazy images.\n- For these images, the cloud probability threshold is set to 0.1 instead of 0.4 (previous version).\n- A side effect of this strategy is that river segment that are surrounded by bare soil also give high correlation. To handle this, we first check correlation values of all the images for that segment. If a vast majority of the images show high correlation values, then this strategy is not applied on those segments. \n ##### Spatial Clustering combined with Semantic Segmentation\n The strategy to combine clustering and semantic segmentation based maps were updated. The latest version improves detection performance in the presence of haze. A new strategy to identify cloud shadows was added to reduce errors.\n \n",
            "confidence": [
                [
                    0.9663275397669889,
                    0.9424575206153674
                ]
            ],
            "technique": "Supervised classification",
            "originalHeader": "Cloud Filter",
            "parentHeader": [
                "riverwidthEO version 1.2 (updated July 1st)",
                "changes in 1.1"
            ]
        },
        {
            "excerpt": "process river segments using satellite imagery and machine learning",
            "confidence": [
                1.0
            ],
            "technique": "GitHub API"
        }
    ],
    "installation": [
        {
            "originalHeader": "Descarteslabs API",
            "excerpt": "setup the client id and secret -\n\n```\nexport DESCARTESLABS_CLIENT_ID=...\nexport DESCARTESLABS_CLIENT_SECRET=...\n```\n",
            "parentHeader": [
                "riverwidthEO version 1.2 (updated July 1st)",
                "Installation"
            ],
            "confidence": [
                1.0
            ],
            "technique": "Header extraction"
        },
        {
            "originalHeader": "Anaconda",
            "excerpt": "Install anaconda if it is currently not installed -\n```\nwget https://repo.continuum.io/archive/Anaconda3-5.0.1-Linux-x86_64.sh\nsha256sum Anaconda3-5.0.1-Linux-x86_64.sh\nbash Anaconda3-5.0.1-Linux-x86_64.sh\nsource ~/.bashrc\n```\nset up the conda environment -\n```\nconda create --yes -n rweo numpy pandas tensorflow keras gdal shapely scikit-image fiona geopandas\nsource activate rweo\npip install s2cloudless\npip install progressbar\npip install descarteslabs\n```\n",
            "parentHeader": [
                "riverwidthEO version 1.2 (updated July 1st)",
                "Installation"
            ],
            "confidence": [
                1.0
            ],
            "technique": "Header extraction"
        },
        {
            "originalHeader": "Docker",
            "excerpt": "Use the Dockerfile to setup the docker image -\n```\ndocker build -f Dockerfile -t <image_tag> .\n```\nUse the following command to use the docker to run the script -\n```\nsudo docker run -v <path_of_local_directory>:<docker_mount_path> -it <image_tag>\n```\nSet the descarteslabs API client and secret when you are in the docker image -\n```\nexport DESCARTESLABS_CLIENT_ID=...\nDESCARTESLABS_CLIENT_SECRET=...\n```\n",
            "parentHeader": [
                "riverwidthEO version 1.2 (updated July 1st)",
                "Installation"
            ],
            "confidence": [
                1.0
            ],
            "technique": "Header extraction"
        }
    ],
    "longTitle": {
        "excerpt": "riverwidthEO version 1.2 (updated July 1st)",
        "confidence": [
            1.0
        ],
        "technique": "Regular expression"
    },
    "codeRepository": {
        "excerpt": "https://github.com/mintproject/riverwidthEO",
        "confidence": [
            1.0
        ],
        "technique": "GitHub API"
    },
    "owner": {
        "excerpt": "mintproject",
        "confidence": [
            1.0
        ],
        "technique": "GitHub API"
    },
    "ownerType": {
        "excerpt": "Organization",
        "confidence": [
            1.0
        ],
        "technique": "GitHub API"
    },
    "dateCreated": {
        "excerpt": "2020-04-30T18:08:04Z",
        "confidence": [
            1.0
        ],
        "technique": "GitHub API"
    },
    "dateModified": {
        "excerpt": "2020-07-01T16:51:00Z",
        "confidence": [
            1.0
        ],
        "technique": "GitHub API"
    },
    "name": {
        "excerpt": "riverwidthEO",
        "confidence": [
            1.0
        ],
        "technique": "GitHub API"
    },
    "fullName": {
        "excerpt": "mintproject/riverwidthEO",
        "confidence": [
            1.0
        ],
        "technique": "GitHub API"
    },
    "issueTracker": {
        "excerpt": "https://api.github.com/repos/mintproject/riverwidthEO/issues",
        "confidence": [
            1.0
        ],
        "technique": "GitHub API"
    },
    "forksUrl": {
        "excerpt": "https://api.github.com/repos/mintproject/riverwidthEO/forks",
        "confidence": [
            1.0
        ],
        "technique": "GitHub API"
    },
    "downloadUrl": {
        "excerpt": "https://github.com/mintproject/riverwidthEO/releases",
        "confidence": [
            1.0
        ],
        "technique": "GitHub API"
    },
    "stargazersCount": {
        "excerpt": {
            "count": 0,
            "date": "Wed, 18 May 2022 21:46:59 GMT"
        },
        "confidence": [
            1.0
        ],
        "technique": "GitHub API"
    },
    "forksCount": {
        "excerpt": {
            "count": 0,
            "date": "Wed, 18 May 2022 21:46:59 GMT"
        },
        "confidence": [
            1.0
        ],
        "technique": "GitHub API"
    },
    "languages": {
        "excerpt": [
            "Python",
            "Jupyter Notebook",
            "Dockerfile"
        ],
        "confidence": [
            1.0
        ],
        "technique": "GitHub API"
    },
    "readmeUrl": {
        "excerpt": "https://raw.githubusercontent.com/mintproject/riverwidthEO/master/README.md",
        "confidence": [
            1.0
        ],
        "technique": "GitHub API"
    },
    "hasExecutableNotebook": {
        "excerpt": [
            "https://raw.githubusercontent.com/mintproject/riverwidthEO/master/MINT_DataCatalog_riverwidthEO.ipynb"
        ],
        "confidence": [
            1.0
        ],
        "technique": "File Exploration",
        "format": "jupyter notebook"
    },
    "hasBuildFile": [
        {
            "excerpt": [
                "https://raw.githubusercontent.com/mintproject/riverwidthEO/master/Dockerfile"
            ],
            "confidence": [
                1.0
            ],
            "technique": "File Exploration",
            "format": "Docker file"
        }
    ],
    "inspect4py": {
        "software_type": "script",
        "run": "python /Users/dakixr/Desktop/github/scc/tmp/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/riverwidthEO/example.py"
    }
}